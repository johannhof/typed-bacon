// Generated by CoffeeScript 1.9.1
(function() {
  var Bacon, init,
    slice = [].slice;

  init = function(Bacon) {
    Bacon.Observable.prototype.typeFilter = function() {
      var filter, res, types;
      types = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      filter = this.filter(function(val) {
        var i, len, type;
        for (i = 0, len = types.length; i < len; i++) {
          type = types[i];
          if (type.isType(val)) {
            return true;
          }
        }
      });
      return res = filter.withDescription(this, "typeFilter", types);
    };
    Bacon.Observable.prototype.typeCheck = function() {
      var map, res, types;
      types = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      map = this.map(function(val) {
        var i, len, type;
        for (i = 0, len = types.length; i < len; i++) {
          type = types[i];
          if (type.isType(val)) {
            return val;
          }
        }
        throw new Error("Expected " + val + " to be of type " + type.description + ".");
      });
      return res = map.withDescription(this, "typeCheck", types);
    };
    return {
      Types: {
        Existy: {
          description: "existy",
          isType: function(val) {
            return val != null;
          }
        },
        Null: {
          description: "null",
          isType: function(val) {
            return val === null;
          }
        },
        Boolean: {
          description: "boolean",
          isType: function(val) {
            return typeof val === 'boolean';
          }
        },
        Number: {
          description: "number",
          isType: function(val) {
            return typeof val === 'number';
          }
        },
        String: {
          description: "string",
          isType: function(val) {
            return typeof val === 'string';
          }
        },
        Array: {
          description: "array",
          isType: function(val) {
            return Object.prototype.toString.call(val) === "[object Array]";
          }
        },
        Object: {
          description: "object",
          isType: function(val) {
            return Object.prototype.toString.call(val) === "[object Object]";
          }
        },
        Function: {
          description: "function",
          isType: function(val) {
            return typeof val === 'function';
          }
        }
      }
    };
  };

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    Bacon = require("baconjs");
    module.exports = init(Bacon);
  } else {
    if (typeof define === "function" && define.amd) {
      define(["bacon"], init);
    } else {
      init(this.Bacon);
    }
  }

}).call(this);
