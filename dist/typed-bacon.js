// Generated by CoffeeScript 1.9.2
(function() {
  var Bacon, Existy, Null, Type, _Array, _Boolean, _Function, _Number, _Object, _String, deepIsType, init,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = (function() {
    function Type() {
      this.alternatives = [];
    }

    Type.prototype.or = function(type) {
      this.alternatives.push(type);
      return this;
    };

    Type.prototype.isType = function(val) {
      var i, len, ref, type;
      ref = this.alternatives;
      for (i = 0, len = ref.length; i < len; i++) {
        type = ref[i];
        if (type.isType(val)) {
          return true;
        }
      }
      return false;
    };

    return Type;

  })();

  _Array = (function(superClass) {
    extend(_Array, superClass);

    _Array.isType = function(val, e) {
      if (Object.prototype.toString.call(val) === "[object Array]") {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be an array");
      }
      return false;
    };

    _Array.prototype.isType = function(val, e) {
      if (_Array.__super__.isType.call(this, val, e)) {
        return true;
      }
      if (!_Array.isType(val, e)) {
        return false;
      }
      if ((this.options.length != null) && val.length !== this.options.length) {
        if (e != null) {
          e.error = new Error("Expected [" + val + "] to have a length of " + this.options.length);
        }
        return false;
      }
      return true;
    };

    function _Array(options) {
      if (options == null) {
        options = {};
      }
      if (!(this instanceof _Array)) {
        return new _Array(options);
      }
      _Array.__super__.constructor.call(this);
      this.options = options;
    }

    return _Array;

  })(Type);

  _Boolean = (function(superClass) {
    extend(_Boolean, superClass);

    _Boolean.isType = function(val, e) {
      if (typeof val === 'boolean') {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be a boolean");
      }
      return false;
    };

    _Boolean.prototype.isType = function(val, e) {
      if (_Boolean.__super__.isType.call(this, val, e)) {
        return true;
      }
      if (!_Boolean.isType(val, e)) {
        return false;
      }
      return true;
    };

    function _Boolean() {
      if (!(this instanceof _Boolean)) {
        return new _Boolean();
      }
      _Boolean.__super__.constructor.call(this);
    }

    return _Boolean;

  })(Type);

  Existy = (function(superClass) {
    extend(Existy, superClass);

    Existy.description = "existy";

    Existy.isType = function(val, e) {
      if (val != null) {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be existy");
      }
      return false;
    };

    Existy.prototype.isType = function(val, e) {
      if (Existy.__super__.isType.call(this, val, e)) {
        return true;
      }
      if (!Existy.isType(val, e)) {
        return false;
      }
      return true;
    };

    function Existy() {
      if (!(this instanceof Existy)) {
        return new Existy();
      }
      Existy.__super__.constructor.call(this);
    }

    return Existy;

  })(Type);

  _Function = (function(superClass) {
    extend(_Function, superClass);

    _Function.isType = function(val, e) {
      if (typeof val === 'function') {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be a function");
      }
      return false;
    };

    _Function.prototype.isType = function(val, e) {
      if (_Function.__super__.isType.call(this, val, e)) {
        return true;
      }
      if (!_Function.isType(val, e)) {
        return false;
      }
      return true;
    };

    function _Function() {
      if (!(this instanceof _Function)) {
        return new _Function();
      }
      _Function.__super__.constructor.call(this);
    }

    return _Function;

  })(Type);

  Null = (function(superClass) {
    extend(Null, superClass);

    Null.isType = function(val, e) {
      if (val === null) {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be null.");
      }
      return false;
    };

    Null.prototype.isType = function(val, e) {
      if (Null.__super__.isType.call(this, val, e)) {
        return true;
      }
      if (!Null.isType(val, e)) {
        return false;
      }
      return true;
    };

    function Null() {
      if (!(this instanceof Null)) {
        return new Null();
      }
      Null.__super__.constructor.call(this);
    }

    return Null;

  })(Type);

  _Number = (function(superClass) {
    extend(_Number, superClass);

    _Number.isType = function(val, e) {
      if (typeof val === 'number') {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be a number");
      }
      return false;
    };

    _Number.prototype.isType = function(val, e) {
      if (_Number.__super__.isType.call(this, val, e)) {
        return true;
      }
      if (!_Number.isType(val, e)) {
        return false;
      }
      return true;
    };

    function _Number() {
      if (!(this instanceof _Number)) {
        return new _Number();
      }
      _Number.__super__.constructor.call(this);
    }

    return _Number;

  })(Type);

  deepIsType = function(proto, comp, e) {
    var key, val;
    for (key in proto) {
      if (!hasProp.call(proto, key)) continue;
      val = proto[key];
      if (val.isType) {
        if (!val.isType(comp[key], e)) {
          return false;
        }
      } else if (typeof val === "object") {
        if (!deepIsType(val, comp[key], e)) {
          return false;
        }
      } else {
        return false;
      }
    }
    return true;
  };

  _Object = (function(superClass) {
    extend(_Object, superClass);

    _Object.isType = function(val, e) {
      if (Object.prototype.toString.call(val) === "[object Object]") {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be an object");
      }
      return false;
    };

    _Object.prototype.isType = function(val, e) {
      if (_Object.__super__.isType.call(this, val)) {
        return true;
      }
      if (!_Object.isType(val)) {
        if (e != null) {
          e.error = new Error("Expected " + val + " to be an object");
        }
        return false;
      }
      return deepIsType(this.proto, val, e);
    };

    function _Object(proto) {
      if (proto == null) {
        proto = {};
      }
      if (!(this instanceof _Object)) {
        return new _Object(proto);
      }
      _Object.__super__.constructor.call(this);
      this.proto = proto;
    }

    return _Object;

  })(Type);

  _String = (function(superClass) {
    extend(_String, superClass);

    _String.isType = function(val, e) {
      if (typeof val === 'string') {
        return true;
      }
      if (e != null) {
        e.error = new Error("Expected " + val + " to be a string");
      }
      return false;
    };

    _String.prototype.isType = function(val, e) {
      if (_String.__super__.isType.call(this, val, e)) {
        return true;
      }
      if (!_String.isType(val, e)) {
        return false;
      }
      return true;
    };

    function _String() {
      if (!(this instanceof _String)) {
        return new _String();
      }
      _String.__super__.constructor.call(this);
    }

    return _String;

  })(Type);

  init = function(Bacon) {
    Bacon.Observable.prototype.typeFilter = function(type) {
      var filter, res;
      filter = this.filter(function(val) {
        return type.isType(val);
      });
      return res = filter.withDescription(this, "typeFilter", type);
    };
    Bacon.Observable.prototype.typeCheck = function(type) {
      var map, res;
      map = this.flatMap(function(val) {
        var e;
        e = {};
        if (type.isType(val, e)) {
          return val;
        }
        return new Bacon.Error(e.error);
      });
      return res = map.withDescription(this, "typeCheck", type);
    };
    Bacon.Observable.prototype.typeWarn = function(type, level) {
      var res, warn;
      if (level == null) {
        level = "warn";
      }
      warn = this.doAction(function(val) {
        var e, ref;
        e = {};
        if (!type.isType(val, e)) {
          if (console[level]) {
            return console[level].call(null, (ref = e.error) != null ? ref.message : void 0);
          }
        }
      });
      return res = warn.withDescription(this, "typeWarn", type);
    };
    return {
      Types: {
        Existy: Existy,
        Null: Null,
        Boolean: _Boolean,
        Number: _Number,
        String: _String,
        Array: _Array,
        Object: _Object,
        Function: _Function
      }
    };
  };

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    Bacon = require("baconjs");
    module.exports = init(Bacon);
  } else {
    if (typeof define === "function" && define.amd) {
      define(["bacon"], init);
    } else {
      init(this.Bacon);
    }
  }

}).call(this);
